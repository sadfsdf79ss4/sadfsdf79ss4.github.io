{"version":3,"sources":["app/components/navbar.js","app/components/selectlanguage.js","app/components/languagecardview.js","index.js","app/index.js"],"names":["NavBar","props","react_default","a","createElement","Navbar","color","NavbarBrand","style","fontWeight","SelectLanguage","categoryList","Object","keys","data","map","key","DropdownItem","onClick","onCategorySelected","category","languages","hasOwnProperty","selectedCategory","list","languageList","e","onLanguageSelected","selectedLang","find","selectedLanguage","Card","CardHeader","id","onResetClicked","CardBody","UncontrolledDropdown","DropdownToggle","caret","DropdownMenu","right","paddingLeft","disabled","LanguageCardview","link","Button","href","target","name","CardText","description","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setSelectedCategory","_useState3","_useState4","setSelectedLanguage","_useState5","_useState6","setLanguages","_useState7","_useState8","basicData","setBasicData","_useState9","_useState10","isLoaded","setIsLoaded","_useState11","_useState12","isErrored","setIsErrored","useEffect","fetch","dataURL","then","res","ok","json","metadata","catch","err","console","log","selectedLangData","selectedLangName","forEach","fontSize","document","getElementById"],"mappings":"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","file":"static/js/main.16ecdcf6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, NavbarBrand } from \"reactstrap\";\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <Navbar color=\"dark\">\r\n      <NavbarBrand style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n        프로그래밍 언어 목록\r\n      </NavbarBrand>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardText,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nexport default function SelectLanguage(props) {\r\n  let categoryList = Object.keys(props.data).map(key => (\r\n    <DropdownItem key={key} onClick={() => props.onCategorySelected(key)}>\r\n      {props.data[key].category}\r\n    </DropdownItem>\r\n  ));\r\n  let languages = props.data.hasOwnProperty(props.selectedCategory)\r\n    ? props.data[props.selectedCategory].list\r\n    : null;\r\n  let languageList = languages\r\n    ? languages.map(e => (\r\n        <DropdownItem key={e[0]} onClick={() => props.onLanguageSelected(e[0])}>\r\n          {e[1]}\r\n        </DropdownItem>\r\n      ))\r\n    : [];\r\n  let selectedLang = languages\r\n    ? languages.find(e => e[0] === props.selectedLanguage)\r\n    : null;\r\n  if (selectedLang) {\r\n    selectedLang = selectedLang[1];\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div id=\"selectlang-title\">\r\n          <span id=\"title\">프로그래밍 언어 선택</span>\r\n          <div id=\"reset\" onClick={props.onResetClicked}>\r\n            <span>&times;</span>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div id=\"selectlang-container\">\r\n          <UncontrolledDropdown>\r\n            <DropdownToggle caret>\r\n              {props.data.hasOwnProperty(props.selectedCategory)\r\n                ? props.data[props.selectedCategory].category\r\n                : \"선택안함\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu right>{categoryList}</DropdownMenu>\r\n          </UncontrolledDropdown>\r\n          <UncontrolledDropdown style={{ paddingLeft: \"1em\" }}>\r\n            <DropdownToggle\r\n              caret\r\n              disabled={!props.data.hasOwnProperty(props.selectedCategory)}\r\n            >\r\n              {selectedLang ? selectedLang : \"선택안함\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu right>{languageList}</DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardBody, CardText, Button } from \"reactstrap\";\r\n\r\nexport default function LanguageCardview(props) {\r\n  let link =\r\n    \"link\" in props && props.link ? (\r\n      <Button href={props.link} target=\"_blank\">\r\n        사이트로 이동\r\n      </Button>\r\n    ) : null;\r\n  return (\r\n    <Card>\r\n      <CardHeader>상세정보 - {props.name}</CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          {\"description\" in props && props.description\r\n            ? props.description\r\n            : \"설명이 없습니다.\"}\r\n        </CardText>\r\n        {link}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <App dataURL=\"./data/data.json\" />,\n  document.getElementById(\"root\")\n);\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Navbar from \"./components/navbar\";\r\nimport SelectLanguage from \"./components/selectlanguage\";\r\nimport LanguageCardview from \"./components/languagecardview\";\r\n\r\nconst languagePlaceholder = {\r\n  \"0\": {\r\n    category: \"객체지향\",\r\n    list: [[0, \"Java\"], [1, \"C++\"]]\r\n  },\r\n  \"1\": {\r\n    category: \"절차지향\",\r\n    list: [[2, \"Javadf\"], [3, \"C++df\"]]\r\n  }\r\n};\r\n\r\nconst basicDataPlaceholder = [\r\n  {\r\n    id: 0,\r\n    description: \"자바는 ㄹㅇㄴㄹㄴㅁㅇㄹㄴㅁㅇㄹ\",\r\n    link: \"https://www.java.com\"\r\n  }\r\n];\r\n\r\nexport default function App(props) {\r\n  let [selectedCategory, setSelectedCategory] = useState(-1);\r\n  let [selectedLanguage, setSelectedLanguage] = useState(-1);\r\n  let [languages, setLanguages] = useState(null);\r\n  let [basicData, setBasicData] = useState(null);\r\n  let [isLoaded, setIsLoaded] = useState(false);\r\n  let [isErrored, setIsErrored] = useState(false);\r\n  useEffect(() => {\r\n    fetch(props.dataURL)\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then(json => {\r\n        setLanguages(json.languages);\r\n        setBasicData(json.metadata);\r\n        setIsLoaded(true);\r\n      })\r\n      .catch(err => {\r\n        setIsErrored(true);\r\n        console.log(\"데이터 로딩 실패\");\r\n      });\r\n  }, [props.dataURL]);\r\n  let selectedLangData =\r\n    selectedLanguage >= 0 && selectedLanguage in basicData\r\n      ? basicData[selectedLanguage]\r\n      : null;\r\n  let selectedLangName = null;\r\n  if (selectedLanguage >= 0) {\r\n    Object.keys(languages).forEach(key =>\r\n      languages[key].list.forEach(e => {\r\n        if (e[0] === selectedLanguage) {\r\n          selectedLangName = e[1];\r\n        }\r\n      })\r\n    );\r\n  }\r\n  function reset() {\r\n    setSelectedCategory(-1);\r\n    setSelectedLanguage(-1);\r\n  }\r\n  if (!isLoaded) {\r\n    return (\r\n      <div id=\"custom-container\">\r\n        <Navbar />\r\n        <span style={{ fontSize: \"2em\" }}>\r\n          {isErrored ? \"데이터 로딩 실패\" : \"데이터 로딩중입니다...\"}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div id=\"custom-container\">\r\n      <Navbar />\r\n      <SelectLanguage\r\n        data={languages}\r\n        selectedCategory={selectedCategory}\r\n        onCategorySelected={id => {\r\n          setSelectedCategory(id);\r\n          setSelectedLanguage(-1);\r\n        }}\r\n        selectedLanguage={selectedLanguage}\r\n        onLanguageSelected={id => setSelectedLanguage(id)}\r\n        onResetClicked={reset}\r\n      />\r\n      {selectedLanguage >= 0 ? (\r\n        <LanguageCardview\r\n          name={selectedLangName}\r\n          description={\r\n            selectedLangData && \"description\" in selectedLangData\r\n              ? selectedLangData.description\r\n              : null\r\n          }\r\n          link={\r\n            selectedLangData && \"link\" in selectedLangData\r\n              ? selectedLangData.link\r\n              : null\r\n          }\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}